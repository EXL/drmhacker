#############################################################################
# Makefile for building drm_sp_hacker
# Generated by tmake at 05:36, 2022/01/27
#     Project: drm_sp_hacker
#    Template: app
#############################################################################

####### Compiler, tools and options

CC	=	arm-linux-gcc
CXX	=	arm-linux-g++
STRIP = arm-linux-strip
CFLAGS	=	-pipe -DEZX_E680I -Wall -W -O2 -D_REENTRANT -DQT_THREAD_SUPPORT -DNO_DEBUG
CXXFLAGS=	-pipe -DEZX_E680I -DQWS -fno-exceptions -fno-rtti -Wall -W -O2 -D_REENTRANT -DQT_THREAD_SUPPORT -DNO_DEBUG
INCPATH	=	-I/usr/local/arm/arm-xscale-linux-vfp/include -I$(QTDIR)/include/ezx -I$(QTDIR)/include/qt
LINK	=	arm-linux-g++
LFLAGS	=	-Wl,-rpath-link,$(QTDIR)/lib
LIBS	=	$(SUBLIBS) -L$(QTDIR)/lib -lezxdrmsp-xscale-r -lpthread -lqte-mt-xscale-r -lezxappbase-xscale-r -lezxappsdk-xscale-r -lezxjpeg-xscale-r -lezxtapi-xscale-r
MOC	=	$(QTDIR)/bin/moc
UIC	=	$(QTDIR)/bin/uic

TAR	=	tar -cf
GZIP	=	gzip -9f

####### Files

HEADERS =	
SOURCES =	drm_sp_hacker.cpp
OBJECTS =	drm_sp_hacker.o
INTERFACES =	
UICDECLS =	
UICIMPLS =	
SRCMOC	=	
OBJMOC	=	
DIST	=	
TARGET	=	drm_sp_hacker_e680
INTERFACE_DECL_PATH = .

####### Implicit rules

.SUFFIXES: .cpp .cxx .cc .C .c

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o $@ $<

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o $@ $<

####### Build rules


all: $(TARGET)

$(TARGET): $(UICDECLS) $(OBJECTS) $(OBJMOC) 
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJMOC) $(LIBS)
	$(STRIP) -s $(TARGET)

moc: $(SRCMOC)

tmake: Makefile.e680

Makefile.e680: drm_sp_hacker.pro
	tmake drm_sp_hacker.pro -o Makefile.e680

dist:
	$(TAR) drm_sp_hacker.tar drm_sp_hacker.pro $(SOURCES) $(HEADERS) $(INTERFACES) $(DIST)
	$(GZIP) drm_sp_hacker.tar

clean:
	-rm -f $(OBJECTS) $(OBJMOC) $(SRCMOC) $(UICIMPLS) $(UICDECLS) $(TARGET)
	-rm -f *~ core

####### Sub-libraries


###### Combined headers


####### Compile

drm_sp_hacker.o: drm_sp_hacker.cpp

